name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/sahratalk-be:1.0

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # Waits for the build-and-push job to complete

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy docker-compose-cd.yml to VM
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: 'docker-compose-cd.yml' # Or correct path if in subdir
          target: '~/'

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          env:
            NODE_ENV: production
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            SERVER_PORT: ${{ secrets.SERVER_PORT }}
            REDIS_HOST: ${{ secrets.REDIS_HOST }}
            REDIS_PORT: ${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            JWT_ACCESS_SECRET_KEY: ${{ secrets.JWT_ACCESS_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY: ${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_ACCESS_TOKEN_TTL: ${{ secrets.JWT_ACCESS_TOKEN_TTL }}
            JWT_REFRESH_TOKEN_TTL: ${{ secrets.JWT_REFRESH_TOKEN_TTL }}
            JWT_REFRESH_TOKEN_COOKIE_TTL: ${{ secrets.JWT_REFRESH_TOKEN_COOKIE_TTL }}
            CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Stop and remove container if it exists
            if [ "$(docker ps -aq -f name=SahraTalkBE)" ]; then
                echo "Stopping and removing existing SahraTalkBE container..."
                docker stop SahraTalkBE
                docker rm SahraTalkBE
            else
                echo "No existing SahraTalkBE container found."
            fi

            # Remove image if it exists
            if [ "$(docker images -q omarsalhi1/sahratalk-be:1.0)" ]; then
                echo "Removing existing image omarsalhi1/sahratalk-be:1.0..."
                docker rmi omarsalhi1/sahratalk-be:1.0
            else
                echo "No existing image omarsalhi1/sahratalk-be:1.0 found."
            fi

            # Create .env file on the server using the environment variables
            # This is the safest method to handle special characters in secrets
            cat > .env <<EOF
            NODE_ENV=$NODE_ENV
            DATABASE_URL=$DATABASE_URL
            SERVER_PORT=$SERVER_PORT
            REDIS_HOST=$REDIS_HOST
            REDIS_PORT=$REDIS_PORT
            REDIS_PASSWORD=$REDIS_PASSWORD
            POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            JWT_ACCESS_SECRET_KEY=$JWT_ACCESS_SECRET_KEY
            JWT_REFRESH_SECRET_KEY=$JWT_REFRESH_SECRET_KEY
            JWT_ACCESS_TOKEN_TTL=$JWT_ACCESS_TOKEN_TTL
            JWT_REFRESH_TOKEN_TTL=$JWT_REFRESH_TOKEN_TTL
            JWT_REFRESH_TOKEN_COOKIE_TTL=$JWT_REFRESH_TOKEN_COOKIE_TTL
            CORS_ORIGIN=$CORS_ORIGIN
            EOF

            docker compose -f docker-compose-cd.yml up -d --remove-orphans --build

            docker ps -a | grep SahraTalkBE

            echo "Deployment completed!"
